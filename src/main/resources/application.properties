server.port=8083

#----------------Rate Limiter example-----------------------------
#The above properties represent that only 2 requests are allowed in 5 seconds duration.
#Also, there is no timeout duration which means after completion of 5 seconds,
#the user can send request again.
resilience4j.ratelimiter.instances.getMessageRateLimit.limit-for-period=2
resilience4j.ratelimiter.instances.getMessageRateLimit.limit-refresh-period=5s
resilience4j.ratelimiter.instances.getMessageRateLimit.timeout-duration=0

#----------------Retry example-----------------------------
#As aforementioned, By default the retry mechanism makes 3 attempts if the service fails for the first time.
#But here we have configured for 5 attempts, each after 2 seconds interval. Additionally, if business requires it to retry only
#if a specific exception occurs, that can also be configured as above.
#If we want Resilience4j to retry when any type of exception occurs, we don?t need to mention the property ?retry-exceptions?.
resilience4j.retry.instances.getInvoiceRetryConfig.max-attempts=3
resilience4j.retry.instances.getInvoiceRetryConfig.wait-duration=2s
#resilience4j.retry.instances.getInvoiceRetryConfig.retry-exceptions=org.springframework.web.client.ResourceAccessException



#----------------Circuit Breaker example-----------------------------
#1) ?failure-rate-threshold=80? indicates that if 80% of requests are getting failed, open the circuit ie. Make the Circuit Breaker state as Open.
#2) ?sliding-window-size=10? indicates that if 80% of requests out of 10 (it means 8) are failing, open the circuit.
#3) ?sliding-window-type=COUNT_BASED? indicates that we are using COUNT_BASED sliding window. Another type is TIME_BASED.
#4) ?minimum-number-of-calls=5? indicates that we need at least 5 calls to calculate the failure rate threshold.
#5) ?automatic-transition-from-open-to-half-open-enabled=true? indicates that don?t switch directly from the open state to the closed state, consider the half-open state also.
#6) ?permitted-number-of-calls-in-half-open-state=4? indicates that when on half-open state, consider sending 4 requests. If 80% of them are failing, switch circuit breaker to open state.
#7) ?wait-duration-in-open-state=1s? indicates the waiting time interval while switching from the open state to the closed state.
#
#These attributes are the important part of an implementation of a Circuit Breaker. We can configure the values as per our requirement and test the implemented functionality accordingly.

resilience4j.circuitbreaker.instances.getInvoiceCB.failure-rate-threshold=80
resilience4j.circuitbreaker.instances.getInvoiceCB.sliding-window-size=10
resilience4j.circuitbreaker.instances.getInvoiceCB.sliding-window-type=COUNT_BASED
resilience4j.circuitbreaker.instances.getInvoiceCB.minimum-number-of-calls=5
resilience4j.circuitbreaker.instances.getInvoiceCB.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.getInvoiceCB.permitted-number-of-calls-in-half-open-state=4
resilience4j.circuitbreaker.instances.getInvoiceCB.wait-duration-in-open-state=1s




#----------------Bulkhead-----------------------------
#?max-concurrent-calls=5?
#       indicates that if the number of concurrent calls exceed 5, activate the fallback method.
#?max-wait-duration=0?
#       indicates that don?t wait for anything, show response immediately based on the configuration.
resilience4j.bulkhead.instances.getMessageBH.max-concurrent-calls=5
resilience4j.bulkhead.instances.getMessageBH.max-wait-duration=0



#----------------TimeLimiter-----------------------------
#?timeout-duration=1ms? indicates that the maximum amount of time a request can take to respond is 1 millisecond
#
#?cancel-running-future=false? indicates that do not cancel the Running Completable Futures After TimeOut.
#
#In order to test the functionality, Run the application as it is. You will get TimeOutException on the Browser. \
#  When you change the value of timeout-duration=1s, you will receive ?Executing Within the time Limit?? message\
#  \ in the browser.
resilience4j.timelimiter.instances.getMessageTL.timeout-duration=1000
resilience4j.timelimiter.instances.getMessageTL.cancel-running-future=false
